% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simsurv.R
\name{simsurv}
\alias{simsurv}
\title{Simulate survival times from a user-specified hazard function}
\usage{
simsurv(hazfn, x = NULL, pars = NULL, maxt = NULL, qnodes = 15,
  interval = c(0, 500), seed = NULL)
}
\arguments{
\item{hazfn}{The user specified hazard function, with named arguments
\code{t}, \code{x} and \code{pars}. See the \strong{Details} section for
a description of these arguments.}

\item{x}{A data frame of covariates to be supplied to \code{hazfn}. Each row
of the data frame should supply the covariate data for one individual.}

\item{pars}{A data frame of parameter values to be supplied to \code{hazfn}.
Each row of the data frame should supply the parameter values for one
individual.}

\item{maxt}{The maximum event time. For simulated event times greater than
\code{maxt}, the event time (\code{"eventtime"}) returned in the data frame
will be truncated at \code{maxt} and the event indicator (\code{"status"})
will be set to zero indicating that the individual was right-censored.}

\item{qnodes}{Integer specifying the number of quadrature nodes to use for
the Gauss-Kronrod quadrature.}

\item{interval}{The interval over which to search for the
\code{\link[stats]{uniroot}} corresponding to each simulated event time.}
}
\value{
A data frame a row for each individual, and the following three
  columns:
  \itemize{
    \item \code{id}  The individual identifier
    \item \code{eventtime} The simulated event (or censoring) time
    \item \code{status} The event indicator, 1 for failure, 0 for censored
  }
}
\description{
Simulate survival times from a user-specified hazard function.The hazard
function is allowed to be time-dependent, and the resulting cumulative
hazard function does not need to have a closed-form solution.
The cumulative hazard is evaluated using Gauss-Kronrod quadrature and
survival times are generated using a combination of the method in Bender
et al. (2005) and Brent's (1973) univariate root finder (for the latter
the \code{\link[stats]{uniroot}} function is used). Not requiring a
closed form solution to the cumulative hazard function has the benefit that
survival times can be generated for complex models such as joint
longitudinal and survival models; the \strong{Examples} section provides
an example of this.
}
\examples{
  #######
  # Here we present an example of simulating survival times
  # based on a joint longitudinal and survival model

  # First we define the hazard function to pass to simsurv
  # (NB this is a Weibull proportional hazards regression submodel
  # from a joint longitudinal and survival model with a "current
  # value" association structure).
  weibull_ph_hazfn <- function(t, x, pars) {
      pars[["shape"]] * (t ^ (pars[["shape"]] - 1)) * exp(
        pars[["betaEvent_intercept"]] +
        pars[["betaEvent_binary"]] * x[["Z1"]] +
        pars[["betaEvent_continuous"]] * x[["Z2"]] +
        pars[["betaEvent_assoc"]] * (
          pars[["betaLong_intercept"]] +
          pars[["betaLong_slope"]] * t +
          pars[["betaLong_binary"]] * x[["Z1"]] +
          pars[["betaLong_continuous"]] * x[["Z2"]]
        )
      )
  }

  # Then we construct data frames with the true parameter
  # values and the covariate data for each individual
  set.seed(5454) # set seed before simulating data
  N <- 20        # number of individuals

  # Population (fixed effect) parameters
  betas <- data.frame(
    shape                = rep(2,    N),
    betaEvent_intercept  = rep(-11.9,N),
    betaEvent_binary     = rep(0.6,  N),
    betaEvent_continuous = rep(0.08, N),
    betaEvent_assoc      = rep(0.03, N),
    betaLong_binary      = rep(-1.5, N),
    betaLong_continuous  = rep(1,    N),
    betaLong_intercept   = rep(90,   N),
    betaLong_slope       = rep(2.5,  N)
  )

  # Individual-specific (random effect) parameters
  b_corrmat <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
  b_sds     <- c(20, 3)
  b_means   <- rep(0, 2)
  b_z       <- MASS::mvrnorm(n = N, mu = b_means, Sigma = b_corrmat)
  b         <- sapply(1:length(b_sds), function(x) b_sds[x] * b_z[,x])
  betas$betaLong_intercept <- betas$betaLong_intercept + b[,1]
  betas$betaLong_slope     <- betas$betaLong_slope     + b[,2]

  # Covariate data
  covs <- data.frame(
    Z1 = rbinom(N, 1, 0.45), # a binary covariate
    Z2 = rnorm(N, 44, 8.5)   # a continuous covariate
  )

  # Then we simulate the survival times based on the
  # hazard function, covariates, and true parameter values
  s1 <- simsurv(example_hazfn, x = covs, pars = betas, maxt = 10)
  head(s1)

}
\references{
Bender R, Augustin T, and Blettner M. (2005) Generating survival times to
  simulate Cox proportional hazards models. \emph{Statistics in Medicine}
  \strong{24}(11), 1713.

  Brent R. (1973) \emph{Algorithms for Minimization without Derivatives}.
  Englewood Cliffs, NJ: Prentice-Hall.
}
\author{
Sam Brilleman (\email{sam.brilleman@monash.edu})
}
